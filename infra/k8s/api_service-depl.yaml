apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-service-depl
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-service
  template:
    metadata:
      labels:
        app: api-service # pod has label of api-service
    spec:
      containers:
        - name: api-service
          image: tylerhanson1/api_service:latest
          imagePullPolicy: "Always"
          env:
            - name: database_url
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: database_url
            - name: db_user
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: db_user
            - name: db_password
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: db_password
            - name: database_name
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: database_name


---
apiVersion: v1
kind: Service
metadata:
  name: api-service-cluster-ip-srv
spec:
  selector:
    app: api-service # the service your selecting
  type: ClusterIP # kubectl defaults to cluster ip if not specified
  ports:
    - name: api-service-cluster-ip-srv
      protocol: TCP
      port: 80 # exposes the Kubernetes service on the specified port within the cluster. Other pods within the cluster can communicate with this server on the specified port.
      targetPort: 80 # is the port on which the service will send requests to, that your pod will be listening on. Your application in the container will need to be listening on this port also.
